Terminals:
+ - * / % and or number variable is ! not ( ) < > = true false string ' " if else elif while for in range : print input str float int double def return class import from as raise len , break continue pass with open
Variables:
S W VAR VAL BOOL OPS STRING IF ELIF ELSE PRINT EXPRESSION RELATIONAL INPUT BRACKET TYPE WHILE FOR RANGE DEF CLASS IMPORT FROM RETURN RAISE METHOD RANGE BREAK PASS CONTINUE COMMENT BODY
Productions:
S -> S S | VAR = W | VAR + = W | VAR - = W | VAR * = W | VAR / = W | IF | PRINT | WHILE | FOR | DEF | CLASS | IMPORT | FROM | COMMENT | ARRAY; 
W ->  VAR | VAL | W OPS W | INPUT | W , W | METHOD;
VAL -> number | W OPS W | W * * W | W / / W | ( W ) | BOOL | STRING;
VAR -> variable;
RELATIONAL -> > | < | = = | ! = | < = | > =;
OPS -> + | - | * | / | %;
BOOL -> true | false | BOOL and BOOL | BOOL or BOOL | not BOOL | W is W | W RELATIONAL W;
STRING -> " string " | ' string ' | STRING + STRING;
BODY -> VAR | BODY BODY;
EXPRESSION -> ( BOOL ) : S | BOOL : S;
COMMENT -> " " " BODY " " " | ' ' ' BODY ' ' ';
BRACKET -> ( W ) | ( );
PRINT -> print BRACKET;
RAISE -> raise BRACKET;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
IF -> if EXPRESSION | IF ELIF | IF ELSE | IF RAISE | IF BREAK | IF PASS | IF CONTINUE;
ELIF -> elif EXPRESSION | ELIF ELIF | ELIF ELSE;
ELSE -> else : S;
TYPE -> str | float | int | double;
INPUT -> input BRACKET | TYPE ( INPUT );
RANGE -> range BRACKET;
WHILE -> while EXPRESSION;
FOR -> for VAR in STRING : S | for VAR in RANGE : S;
RETURN -> return BOOL | return VAL;
DEF -> def VAR BRACKET : S | DEF RETURN;
CLASS -> class VAR : S;
IMPORT -> import VAR as VAR | import VAR;
FROM -> from VAR IMPORT;
METHOD -> len BRACKET | with open BRACKET as VAR